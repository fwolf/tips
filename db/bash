%
fork 炸弹，是一段递归的BASH脚本。
它会不停的 fork 出进程直到 pid 的上限，导致运行新的进程。
    $ :() { :|:& }; :
%
PS: [user@hostname real-pwd]\n$
    PS1="\n\e[1;37m[\e[m\e[1;32m\u\e[m\e[1;33m@\e[m\e[1;35m\h\e[m \e[4m\`pwd\`\e[m\e[1;37m]\e[m\e[1;36m\n\e[m\\$ "
%
测试变量是否已经赋值。
如果变量已经赋值，则使用该变量值。
如果变量为空，则使用 value。value 并不赋给 variable。
    ${variable:-value}
%
测试变量是否已经赋值。
如果变量已经赋值，则使用该变量值。
如果变量为空，则使用 value，并将 value 赋值给 variable。
    ${variable:=value}
%
测试变量是否已经赋值，如果变量为空则显示错误信息。
    ${variable:?"customed message"}
%
测试文件是否存在：
    if ls *.zip >/dev/null 2>&1; then
        echo yes
    fi
%
从字符串的开始抹去最长的匹配子串，可以用?/*代表一个/多个任意字符：
    $ echo ${PWD##*o}
%
从字符串的开始抹去最短的匹配子串，可以用?/*代表一个/多个任意字符：
    $ echo ${PWD#/??}
%
从字符串的末尾抹去最长的匹配子串，可以用?/*代表一个/多个任意字符：
    $ echo ${PWD%%o*}
%
从字符串的末尾抹去最短的匹配子串，可以用?/*代表一个/多个任意字符：
    $ echo ${PWD%??f}
%
从字符串中替换所有匹配的子串，#/%代表匹配从开头/末尾开始；
第二个/省略则代表用空串替换，等同于抹去；可以用?/*代表一个/多个任意字符：
    $ echo "${PWD//\/?/\\h}"
%
从字符串中替换一个最长匹配的子串，#/%代表匹配从开头/末尾开始；
第二个/省略则代表用空串替换，等同于抹去；可以用?/*代表一个/多个任意字符：
    $ echo "${PWD/#\/?/pp} ${PWD/%?f}"
%
打印乘法口诀表
    $ for I in {1..9}; do for J in $(seq 1 $I); do echo -ne $I×$J=$((I*J))\\t; done; echo; done
%
发出 beep 声:
    $ echo $'\07'
%
强制指定0开头的变量为10进制:
    D=$((10#$D)) or 10#$D
%
取字符串的长度：
    $ echo "The length of string '$PWD' is ${#PWD}."
%
取字符串的子串：
    $ echo "${PWD:3} ${PWD:3:5}"
%
取字符串的子串，从串尾倒着取：
    $ echo ${PWD:${#PWD}-8:${#PWD}}
%
